{"date":"2024-05-30T06:49:32.862Z","courseId":"17","assignment":"AP-Spring03-CA6","trace":{"content":"#include \"../includes/post.hpp\"\n\nPost::Post() : Method()\n{\n}\n\nPost::~Post()\n{\n}\n\nvoid Post::login(Argument id, Argument password, vector<User *> &users, User *&currentUser)\n{\n    bool id_found = user_exists(id.key, users);\n    if (!id_found)\n    {\n        throw Absence();\n    }\n\n    User *chosenUser = find_user_by_id(id.key, users);\n\n    if (chosenUser->get_password() != password.key)\n    {\n        throw Inaccessibility();\n    }\n\n    if (chosenUser->signed_in())\n    {\n        throw Inaccessibility();\n    }\n\n    chosenUser->login();\n    currentUser = chosenUser;\n    successful_request();\n}\n\nvoid Post::identify_command(string line, vector<User *> &users, User *&currentUser, int &lessonID_,\n                            vector<Lesson *> &lessons, vector<Course *> &courses, vector<Major *> &majors)\n{\n    istringstream iss(line);\n    string command;\n    iss >> command;\n\n    check_question_mark(line);\n\n    istringstream iss2(line);\n    if (command == \"login\")\n    {\n        handle_login(line, users, currentUser, lessonID_, lessons, courses, majors, iss2);\n    }\n\n    else if (command == \"logout\")\n    {\n        logout(currentUser, line);\n    }\n\n    else if (command == \"post\")\n    {\n        handle_post(line, users, currentUser, lessonID_, lessons, courses, majors, iss2);\n    }\n\n    else if (command == \"connect\")\n    {\n        handle_connect(line, users, currentUser, lessonID_, lessons, courses, majors, iss2);\n    }\n\n    else if (command == \"course_offer\")\n    {\n        handle_course_offer(line, users, currentUser, lessonID_, lessons, courses, majors);\n    }\n\n    else\n    {\n        throw Absence();\n    }\n}\n\nvoid Post::logout(User *&currentUser, string line)\n{\n    if (line != EMPTY and !all_is_space(line))\n    {\n        throw BadRequest();\n    }\n\n    if (currentUser != nullptr)\n    {\n        currentUser->logout();\n        currentUser = nullptr;\n        successful_request();\n        ;\n    }\n\n    else\n    {\n        throw Inaccessibility();\n    }\n}\n\nvoid Post::course_offer(LessonStruct lesson, int &lessonID, User *&currentUser, vector<Lesson *> &lessons,\n                        vector<Course *> &courses, vector<Major *> &majors, vector<User *> &users)\n{\n    Manager *admin = dynamic_cast<Manager *>(currentUser);\n    if (admin)\n    {\n        if (!can_convert_to_int(lesson.courseId) || !can_convert_to_int(lesson.profId) ||\n            !can_convert_to_int(lesson.capacity) || !can_convert_to_int(lesson.classNumber))\n        {\n            throw BadRequest();\n        }\n\n        User *chosenUser = find_user_by_id(lesson.profId, users);\n        Professor *professor = dynamic_cast<Professor *>(chosenUser);\n\n        if (professor == nullptr)\n        {\n            throw Inaccessibility();\n        }\n\n        Course *chosenCourse = find_course_by_id(courses, lesson.courseId);\n\n        if (!chosenCourse->valid_major(professor->get_majorID()))\n        {\n            throw Inaccessibility();\n        }\n\n        Lesson *newLesson = new Lesson(lesson, lessonID);\n        if (professor->does_interfere(newLesson))\n        {\n            throw Inaccessibility();\n        }\n\n        lessons.push_back(newLesson);\n        lessonID++;\n        professor->add_lesson(newLesson);\n        Notification newNotif = construct_notif(professor, COURSE_OFFER_NOTIF);\n        send_notif_to_all(newNotif, users);\n        successful_request();\n    }\n\n    else\n    {\n        throw Inaccessibility();\n    }\n}\n\nbool Post::course_exists(string courseId, vector<Course *> courses)\n{\n    for (Course *c : courses)\n    {\n        if (c->get_CID() == courseId)\n        {\n            return true;\n        }\n    }\n\n    return false;\n}\n\nbool Post::is_prof(string userId, vector<User *> users)\n{\n    for (User *u : users)\n    {\n        if (u->get_id() == userId)\n        {\n            Professor *prof = dynamic_cast<Professor *>(u);\n            if (prof)\n            {\n                return true;\n            }\n        }\n    }\n\n    return false;\n}\n\nvoid Post::connect_users(User *currentUser, User *chosenUser)\n{\n    currentUser->connect(chosenUser);\n    chosenUser->connect(currentUser);\n    successful_request();\n}\n\nvoid Post::handle_course_offer(string line, vector<User *> &users, User *&currentUser, int &lessonID_,\n                               vector<Lesson *> &lessons, vector<Course *> &courses, vector<Major *> &majors)\n{\n    vector<string> parts = split(line, SPACE);\n    LessonStruct lesson;\n    lesson.lessonID = lessonID_;\n    int i = 0;\n    if (parts.size() != 13)\n    {\n        throw BadRequest();\n    }\n\n    for (int i = 1; i < 13; i += 2)\n    {\n        if (parts[i] == \"course_id\")\n        {\n            if (course_exists(parts[i + 1], courses))\n            {\n                lesson.courseId = parts[i + 1];\n                Course *relatedCourse = find_course_by_id(courses, lesson.courseId);\n                lesson.courseName = relatedCourse->get_name();\n                lesson.prereq = relatedCourse->get_prereq();\n                lesson.majors_id = relatedCourse->get_majors_id();\n            }\n            else\n            {\n                throw Absence();\n            }\n        }\n\n        else if (parts[i] == \"professor_id\")\n        {\n            if (user_exists(parts[i + 1], users))\n            {\n                lesson.profId = parts[i + 1];\n                User *prof = find_user_by_id(lesson.profId, users);\n                lesson.profName = prof->get_name();\n            }\n            else\n            {\n                throw Absence();\n            }\n        }\n\n        else if (parts[i] == \"capacity\")\n        {\n            lesson.capacity = parts[i + 1];\n        }\n\n        else if (parts[i] == \"time\")\n        {\n            lesson.weekDay = parts[i + 1];\n            vector<string> timeParts = split(lesson.weekDay, COLON);\n            lesson.weekDay = timeParts[0];\n            vector<string> hourParts = split(timeParts[1], HYPHEN);\n            lesson.startTime = hourParts[0];\n            lesson.endTime = hourParts[1];\n        }\n\n        else if (parts[i] == \"exam_date\")\n        {\n            lesson.date = parts[i + 1];\n        }\n\n        else if (parts[i] == \"class_number\")\n        {\n            lesson.classNumber = parts[i + 1];\n        }\n    }\n    course_offer(lesson, lessonID_, currentUser, lessons, courses, majors, users);\n}\n\nvoid Post::handle_post(string line, vector<User *> &users, User *&currentUser, int &lessonID_,\n                       vector<Lesson *> &lessons, vector<Course *> &courses, vector<Major *> &majors, istringstream &iss2)\n{\n\n    PostStruct post;\n    string title1;\n    iss2 >> title1;\n\n    if (currentUser == nullptr)\n    {\n        throw Inaccessibility();\n    }\n\n    if (title1 == \"title\")\n    {\n        read_post_title(line, post);\n        istringstream iss4(line);\n        string \n        iss4 >> temp;\n\n        if (temp == \"message\")\n        {\n            i = line.find(DOUBLE_QUOTATION);\n            if (i == string::npos)\n            {\n                throw BadRequest();\n            }\n            line = line.substr(i + 1);\n            istringstream iss5(line);\n            getline(iss5, temp, DOUBLE_QUOTATION);\n            post.message = temp;\n        }\n\n        else\n        {\n            throw BadRequest();\n        }\n    }\n\n    else if (title1 == \"message\")\n    {\n        size_t i = line.find(DOUBLE_QUOTATION);\n        if (i == string::npos)\n        {\n            throw BadRequest();\n        }\n        line = line.substr(i + 1);\n        istringstream iss3(line);\n        string temp;\n        getline(iss3, temp, DOUBLE_QUOTATION);\n        post.message = temp;\n\n        i = line.find(DOUBLE_QUOTATION);\n        if (i == string::npos)\n        {\n            throw BadRequest();\n        }\n        line = line.substr(i + 1);\n\n        istringstream iss4(line);\n        iss4 >> temp;\n\n        if (temp == \"title\")\n        {\n            i = line.find(DOUBLE_QUOTATION);\n            if (i == string::npos)\n            {\n                throw BadRequest();\n            }\n            line = line.substr(i + 1);\n            istringstream iss5(line);\n            getline(iss5, temp, DOUBLE_QUOTATION);\n            post.title = temp;\n\n            i = line.find(DOUBLE_QUOTATION);\n            if (i == string::npos)\n            {\n                throw BadRequest();\n            }\n            line = line.substr(i + 1);\n        }\n\n        else if (temp == \"image\")\n        {\n        }\n\n        else\n        {\n            throw BadRequest();\n        }\n    }\n\n    else if (title1 == \"image\")\n    {\n    }\n\n    else\n    {\n        throw BadRequest();\n    }\n\n    Notification postNotif = construct_notif(currentUser, NEW_POST_NOTIF);\n    post.id = currentUser->get_postID();\n    currentUser->add_post(post);\n    Manager *admin = dynamic_cast<Manager *>(currentUser);\n    if (admin)\n    {\n        send_notif_to_all(postNotif, users);\n    }\n    else\n    {\n        currentUser->send_notif(postNotif);\n    }\n    successful_request();\n}\n\nvoid Post::handle_login(string line, vector<User *> &users, User *&currentUser, int &lessonID_,\n                        vector<Lesson *> &lessons, vector<Course *> &courses, vector<Major *> &majors, istringstream &iss2)\n{\n    Argument id;\n    Argument password;\n    string title;\n    string key;\n    string end;\n    iss2 >> title;\n\n    if (currentUser != nullptr)\n    {\n        throw Inaccessibility();\n    }\n\n    if (title == \"id\")\n    {\n        iss2 >> key;\n        id.title = title;\n        id.key = key;\n\n        iss2 >> title;\n        if (title == \"password\")\n        {\n            password.title = title;\n            iss2 >> key;\n            password.key = key;\n        }\n\n        else\n        {\n            throw BadRequest();\n        }\n\n        iss2 >> end;\n        if (end != EMPTY)\n            throw BadRequest();\n    }\n\n    else if (title == \"password\")\n    {\n        iss2 >> key;\n        password.title = title;\n        password.key = key;\n\n        iss2 >> title;\n        if (title == \"id\")\n        {\n            id.title = title;\n            iss2 >> key;\n            id.key = key;\n        }\n\n        else\n        {\n            throw BadRequest();\n        }\n\n        iss2 >> end;\n        if (end != EMPTY)\n            throw BadRequest();\n    }\n\n    else\n    {\n        throw BadRequest();\n    }\n\n    login(id, password, users, currentUser);\n}\n\nvoid Post::handle_connect(string line, vector<User *> &users, User *&currentUser, int &lessonID_,\n                          vector<Lesson *> &lessons, vector<Course *> &courses, vector<Major *> &majors, istringstream &iss2)\n{\n    string title;\n    string userID_;\n    iss2 >> title;\n    iss2 >> userID_;\n\n    if (currentUser == nullptr)\n    {\n        throw Inaccessibility();\n    }\n\n    if (title == \"id\")\n    {\n\n        if (!can_convert_to_int(userID_))\n        {\n            throw BadRequest();\n        }\n\n        if (currentUser->already_connected(userID_))\n        {\n            throw BadRequest();\n        }\n\n        if (!user_exists(userID_, users))\n        {\n            throw Absence();\n        }\n\n        User *chosenUser = find_user_by_id(userID_, users);\n        connect_users(currentUser, chosenUser);\n    }\n\n    else\n    {\n        throw BadRequest();\n    }\n}\n\nvoid Post::send_notif_to_all(Notification notif, vector<User *> &users)\n{\n    for (User *u : users)\n    {\n        u->receive_notif(notif);\n    }\n}\n\nvoid Post::read_post_title(string &line, PostStruct &post)\n{\n    size_t i = line.find(DOUBLE_QUOTATION);\n    if (i == string::npos)\n    {\n        throw BadRequest();\n    }\n    line = line.substr(i + 1);\n    istringstream iss3(line);\n    string temp;\n    getline(iss3, temp, DOUBLE_QUOTATION);\n    post.title = temp;\n\n    i = line.find(DOUBLE_QUOTATION);\n    if (i == string::npos)\n    {\n        throw BadRequest();\n    }\n    line = line.substr(i + 1);\n}\n\nvoid Post::read_post_message()\n{\n}\n\nvoid Post::read_post_image()\n{\n}","filename":"/home/ali3ad3ghi/project6-f1/UTMS-Website/src/post.cpp","identifier":"Save Document","languageId":"cpp","version":1228,"lineCount":517},"failed":false}