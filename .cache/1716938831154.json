{"date":"2024-05-28T23:27:10.817Z","courseId":"17","assignment":"AP-Spring03-CA6","trace":{"content":"#include \"../includes/get.hpp\"\n\nGet::Get() : Method()\n{\n}\n\nGet::~Get()\n{\n}\n\nvoid Get::identify_command(string line, vector<User *> &users, User *&currentUser, int &lessonID_,\n                           vector<Lesson *> &lessons, vector<Course *> &courses, vector<Major *> &majors)\n{\n    istringstream iss(line);\n    string command;\n    iss >> command;\n    \n    check_question_mark(line);\n\n    istringstream iss2(line);\n\n    if (command == \"courses\")\n    {\n        handle_courses(line, users, currentUser, lessonID_, lessons, courses, majors, iss2);\n    }\n\n    else if (command == \"personal_page\")\n    {\n        handle_personal_page(line, users, currentUser, lessonID_, lessons, courses, majors, iss2);\n    }\n\n    else if (command == \"post\")\n    {\n        handle_post(line, users, currentUser, lessonID_, lessons, courses, majors, iss2);\n    }\n\n    else if (command == \"notification\")\n    {\n        handle_notif(line, currentUser);\n    }\n\n    else if (command == \"my_courses\")\n    {\n        handle_my_courses(line, users, currentUser, lessonID_, lessons, courses, majors, iss2);\n    }\n\n    else\n    {\n        throw Absence();\n    }\n}\n\nvoid Get::show_all_lessons(vector<Lesson *> &lessons, vector<Course *> &courses)\n{\n    if (lessons.size() != 0)\n    {\n        for (Lesson *l : lessons)\n        {\n            l->show();\n        }\n    }\n\n    else\n    {\n        throw EmptyException();\n    }\n}\n\nvoid Get::show_post(User *chosenUser, int postID_)\n{\n    chosenUser->show_personal_info();\n    chosenUser->show_post(postID_);\n}\n\nvoid Get::handle_notif(string line, User *&currentUser)\n{\n    if (currentUser == nullptr)\n    {\n        throw Inaccessibility();\n    }\n\n    if (line != EMPTY and !all_is_space(line))\n    {\n        throw BadRequest();\n    }\n\n    currentUser->display_all_notifs();\n}\n\nvoid Get::handle_courses(string line, vector<User *> &users, User *&currentUser, int &lessonID_,\n                         vector<Lesson *> &lessons, vector<Course *> &courses, vector<Major *> &majors, istringstream &iss2)\n{\n    string title;\n    string key;\n    iss2 >> title;\n    iss2 >> key;\n    if (line == EMPTY || all_is_space(line))\n    {\n        show_all_lessons(lessons, courses);\n    }\n\n    else\n    {\n        if (title == \"id\")\n        {\n            if (!can_convert_to_int(key))\n            {\n                throw BadRequest();\n            }\n\n            if (!lesson_exists(stoi(key), lessons))\n            {\n                throw Absence();\n            }\n\n            Lesson *chosenLesson = find_lesson_by_id(lessons, key);\n            chosenLesson->show_detailed();\n        }\n        else\n        {\n            throw BadRequest();\n        }\n    }\n}\n\nvoid Get::handle_personal_page(string line, vector<User *> &users, User *&currentUser, int &lessonID_,\n                               vector<Lesson *> &lessons, vector<Course *> &courses, vector<Major *> &majors, istringstream &iss2)\n{\n    string title;\n    string key;\n    iss2 >> title;\n    iss2 >> key;\n    if (line == EMPTY)\n    {\n        throw BadRequest();\n    }\n\n    if (currentUser == nullptr)\n    {\n        throw Inaccessibility();\n    }\n\n    else\n    {\n        if (title == \"id\")\n        {\n            if (!can_convert_to_int(key))\n            {\n                throw BadRequest();\n            }\n\n            if (!user_exists(key, users))\n            {\n                throw Absence();\n            }\n\n            User *chosenUser = find_user_by_id(key, users);\n            chosenUser->show_personal_page();\n        }\n\n        else\n        {\n            throw BadRequest();\n        }\n    }\n}\n\nvoid Get::handle_my_courses(string line, vector<User *> &users, User *&currentUser, int &lessonID_,\n                            vector<Lesson *> &lessons, vector<Course *> &courses, vector<Major *> &majors, istringstream &iss2)\n{\n    if (line != EMPTY and !all_is_space(line))\n    {\n        throw BadRequest();\n    }\n\n    if (currentUser == nullptr)\n    {\n        throw Inaccessibility();\n    }\n\n    if (currentUser->no_active_lessons())\n    {\n        throw EmptyException();\n    }\n\n    currentUser->display_all_lessons();\n}\n\nvoid Get::handle_post(string line, vector<User *> &users, User *&currentUser, int &lessonID_,\n                      vector<Lesson *> &lessons, vector<Course *> &courses, vector<Major *> &majors, istringstream &iss2)\n{\n    Argument user;\n    Argument post;\n    string title;\n    string key;\n    iss2 >> title;\n    iss2 >> key;\n    if (currentUser == nullptr)\n    {\n        throw Inaccessibility();\n    }\n\n    if (title == \"id\")\n    {\n        user.title = title;\n        user.key = key;\n        iss2 >> title;\n        iss2 >> key;\n        if (title == \"post_id\")\n        {\n            post.title = title;\n            post.key = key;\n        }\n        else\n        {\n            throw BadRequest();\n        }\n    }\n\n    else if (title == \"post_id\")\n    {\n        post.title = title;\n        post.key = key;\n        iss2 >> title;\n        iss2 >> key;\n        if (title == \"id\")\n        {\n            user.title = title;\n            user.key = key;\n        }\n        else\n        {\n            throw BadRequest();\n        }\n    }\n\n    if (!user_exists(user.key, users))\n    {\n        throw Absence();\n    }\n\n    User *chosenUser = find_user_by_id(user.key, users);\n\n    if (!can_convert_to_int(post.key) || !can_convert_to_int(user.key))\n    {\n        throw BadRequest();\n    }\n\n    if (!chosenUser->have_this_post(stoi(post.key)))\n    {\n        throw Absence();\n    }\n\n    show_post(chosenUser, stoi(post.key));\n}","filename":"/home/ali3ad3ghi/project6-f1/UTMS-Website/src/get.cpp","identifier":"Save Document","languageId":"cpp","version":379,"lineCount":255},"failed":true}