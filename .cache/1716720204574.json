{"date":"2024-05-26T10:43:24.507Z","courseId":"17","assignment":"AP-Spring03-CA6","trace":{"content":"#include \"../includes/user.hpp\"\n\nUser::User(MD major_)\n{\n    is_signed_in = false;\n    postID = 1;\n    major.MID = major_.MID;\n    major.name = major_.name;\n};\n\nUser::~User()\n{\n}\n\nstring User::get_id() { return ID; };\nstring User::get_name() { return name; };\nstring User::get_majorID() { return majorID; };\nstring User::get_password() { return password; };\nbool User::signed_in() { return is_signed_in; };\nint User::get_postID() { return postID; };\n\nvoid User::login()\n{\n    is_signed_in = true;\n}\n\nvoid User::logout()\n{\n    is_signed_in = false;\n}\n\nvoid User::show_personal_page()\n{\n}\n\nbool User::does_interfere(string startTime)\n{\n    for (Lesson *l : activeLessons)\n    {\n        if (l->get_end_time() > stoi(startTime))\n        {\n            return true;\n        }\n    }\n    return false;\n}\n\nvoid User::add_lesson(Lesson *&newLesson)\n{\n    activeLessons.push_back(newLesson);\n}\n\nvoid User::add_post(PostStruct post)\n{\n    posts.push_back(post);\n    postID++;\n}\n\nvoid User::delete_post(int postID_)\n{\n    bool valid_post = false;\n    for (auto p = posts.begin(); p != posts.end(); ++p)\n    {\n        if (p->id == postID_)\n        {\n            valid_post = true;\n            posts.erase(p);\n            break;\n        }\n    }\n\n    if (!valid_post)\n    {\n        throw Absence();\n    }\n}\n\nstring User::lessons_in_line()\n{\n    string ll = \"\";\n    for (int i = 0; i < activeLessons.size(); i++)\n    {\n        ll += activeLessons[i]->get_course_name();\n        if (i != activeLessons.size() - 1)\n        {\n            ll += COMMA;\n        }\n    }\n    return ll;\n}\n\nvoid User::show_post_titles()\n{\n    for (PostStruct p : posts)\n    {\n        cout << p.id << SPACE << DOUBLE_QUOTATION << p.title << DOUBLE_QUOTATION << endl;\n    }\n}\n\nvoid User::show_personal_info()\n{\n}\n\nvoid User::show_post(int postID_)\n{\n    for (PostStruct p : posts)\n    {\n        if (p.id == postID_)\n        {\n            cout << p.id << SPACE << DOUBLE_QUOTATION << p.title << DOUBLE_QUOTATION << SPACE\n                 << DOUBLE_QUOTATION << p.message << DOUBLE_QUOTATION << endl;\n        }\n    }\n}\n\nbool User::have_this_post(int postID_)\n{\n    for (PostStruct p : posts)\n    {\n        if (p.id == postID_)\n        {\n            return true;\n        }\n    }\n    return false;\n}\n\nbool User::already_connected(string userID_)\n{\n    for (User *u : connections)\n    {\n        if (u->get_id() == userID_)\n        {\n            return true;\n        }\n    }\n    return false;\n}\n\nvoid User::connect(User *chosenUser)\n{\n    connections.push_back(chosenUser);\n}\n\nvoid User::receive_notif(Notification newNotif)\n{\n    notifs.push_back(newNotif);\n}\n\nvoid User::display_all_notifs()\n{\n    if(notifs.size()==0){\n        throw EmptyException();\n    }\n\n    for (Notification n : notifs)\n    {\n        display_notif(n);\n    }\n\n    notifs.clear();\n}\n\nvoid User::display_notif(Notification notif){\n    cout << notif.id << SPACE << notif.name << COLON << SPACE << notif.message << endl;\n}\n\nvoid User::send_notif(Notification postNotif){\n    for(User* u: connections){\n        u->receive_notif(postNotif);\n    }\n}\n\n    Student::Student(SD student, MD major_) : User(major_)\n{\n    ID = student.SID;\n    name = student.name;\n    majorID = student.majorID;\n    password = student.password;\n    semester = student.semester;\n}\n\nStudent::~Student()\n{\n}\n\nvoid Student::show_personal_page()\n{\n    show_personal_info();\n    show_post_titles();\n}\n\nvoid Student::show_personal_info()\n{\n    cout << name << SPACE << major.name << SPACE << semester\n         << SPACE << lessons_in_line() << endl;\n}\n\nbool Student::can_take_lesson(Lesson* &lesson_){\n    if(semester>lesson_.get_prereq()){\n        return true\n    }\n}\n\nProfessor::Professor(PD professor, MD major_) : User(major_)\n{\n    ID = professor.PID;\n    name = professor.name;\n    majorID = professor.majorID;\n    password = professor.password;\n    position = professor.position;\n}\n\nProfessor::~Professor()\n{\n}\n\nvoid Professor::show_personal_page()\n{\n    show_personal_info();\n    show_post_titles();\n}\n\nvoid Professor::show_personal_info()\n{\n    cout << name << SPACE << major.name << SPACE << position\n         << SPACE << lessons_in_line() << endl;\n}\n\nManager::Manager(MD major_) : User(major_)\n{\n    ID = MANAGER_ID;\n    name = MANAGER_NAME;\n    majorID = MANAGER_MAJOR_ID;\n    password = MANAGER_PASSWORD;\n}\n\nManager::~Manager()\n{\n}\n\nvoid Manager::show_personal_page()\n{\n    show_personal_info();\n    show_post_titles();\n}\n\nvoid Manager::show_personal_info()\n{\n    cout << MANAGER_PASSWORD << endl;\n}\n","filename":"/home/ali3ad3ghi/project6-f1/UTMS-Website/src/user.cpp","identifier":"Save Document","languageId":"cpp","version":3419,"lineCount":252},"failed":true}