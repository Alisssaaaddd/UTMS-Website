{"date":"2024-05-24T15:15:15.864Z","courseId":"17","assignment":"AP-Spring03-CA6","trace":{"version":57,"content":"#include \"../includes/post.hpp\"\n\nPost::Post() : Method()\n{\n}\n\nPost::~Post()\n{\n}\n\nvoid Post::login(Argument id, Argument password, vector<User *> &users, User *&currentUser)\n{\n    bool id_found = false;\n    bool password_found = false;\n    for (User *u : users)\n    {\n        if (!u->signed_in())\n        {\n            if (u->get_id() == id.key and u->get_password() == password.key ||\n                u->get_id() == MANAGER_ID and u->get_password() == MANAGER_PASSWORD)\n            {\n                id_found = true;\n                password_found = true;\n                u->login();\n                currentUser = u;\n\n                break;\n            }\n        }\n\n        else\n        {\n            throw Inaccessibility();\n        }\n    }\n\n    if (id_found == false)\n    {\n        throw Absence();\n    }\n\n    if (password_found == false)\n    {\n        throw Inaccessibility();\n    }\n\n    cout << \"OK\" << endl;\n}\n\nvoid Post::identify_command(string line, vector<User *> &users, User *&currentUser, int &lessonID_,\n                            vector<Lesson *> &lessons, vector<Course *> &courses, vector<Major *> &majors)\n{\n    istringstream iss(line);\n    string command;\n    iss >> command;\n    size_t i = line.find(\"?\");\n    if (i != string::npos)\n    {\n        line = line.substr(i + 2);\n    }\n\n    else\n    {\n        throw BadRequest();\n    }\n\n    istringstream iss2(line);\n    if (command == \"login\")\n    {\n        Argument id;\n        Argument password;\n        string title;\n        string key;\n        string end;\n        iss2 >> title;\n\n        if (title == \"id\")\n        {\n            iss2 >> key;\n            id.title = title;\n            id.key = key;\n\n            iss2 >> title;\n            password.title = title;\n            iss2 >> key;\n            password.key = key;\n\n            iss2 >> end;\n            if (end != EMPTY)\n                throw BadRequest();\n        }\n\n        else if (title == \"password\")\n        {\n            iss2 >> key;\n            password.title = title;\n            password.key = key;\n\n            iss2 >> title;\n            id.title = title;\n            iss2 >> key;\n            id.key = key;\n\n            iss2 >> end;\n            if (end != EMPTY)\n                throw BadRequest();\n        }\n\n        else\n        {\n            throw BadRequest();\n        }\n        login(id, password, users, currentUser);\n    }\n\n    else if (command == \"logout\")\n    {\n        logout(currentUser);\n    }\n\n    else if (command == \"post\")\n    {\n    }\n\n    else if (command == \"connect\")\n    {\n    }\n\n    else if (command == \"course_offer\")\n    {\n        vector<string> parts = split(line, SPACE);\n        LessonStruct lesson;\n        lesson.lessonID = lessonID_;\n\n        if (parts.size() != 12)\n        {\n            throw BadRequest();\n        }\n\n        for (int i = 0; i < parts.size(); i += 2)\n        {\n            if (parts[i] == \"course_id\")\n            {\n                lesson.courseId = parts[i + 1];\n            }\n\n            else if (parts[i] == \"professor_id\")\n            {\n                lesson.profId = parts[i + 1];\n            }\n\n            else if (parts[i] == \"capacity\")\n            {\n                lesson.capacity = parts[i + 1];\n            }\n\n            else if (parts[i] == \"time\")\n            {\n                lesson.weekDay = parts[i + 1];\n                vector<string> timeParts = split(lesson.weekDay, ':');\n                lesson.weekDay = timeParts[0];\n                vector<string> hourParts = split(timeParts[1], '-');\n                lesson.startTime = hourParts[0];\n                lesson.endTime = hourParts[1];\n            }\n\n            else if (parts[i] == \"exam_date\")\n            {\n                lesson.date = parts[i + 1];\n            }\n\n            else if (parts[i] == \"class_number\")\n            {\n                lesson.classNumber = parts[i + 1];\n            }\n        }\n        course_offer(lesson, lessonID_, currentUser, lessons, courses, majors, users);\n    }\n\n    else\n    {\n        throw Absence();\n    }\n}\n\nvoid Post::logout(User *&currentUser)\n{\n    if (currentUser != nullptr)\n    {\n        currentUser->logout();\n        currentUser = nullptr;\n        cout << \"OK\" << endl;\n    }\n    else\n    {\n        throw Inaccessibility();\n    }\n}\n\nvoid Post::course_offer(LessonStruct lesson, int &lessonID, User *&currentUser, vector<Lesson *> &lessons,\n                        vector<Course *> &courses, vector<Major *> &majors, vector<User *> &users)\n{\n    Manager *UTaccount = dynamic_cast<Manager *>(currentUser);\n    if (UTaccount)\n    {\n        // cout << \"course: \" << course_exists(lesson.courseId, courses) << endl;\n        // cout << \"user: \" << user_exists(lesson.profId, users) << endl;\n        if (!course_exists(lesson.courseId, courses) || !user_exists(lesson.profId, users))\n        {\n            cout << \"Vojood Nadare!\" << endl;\n            throw Absence();\n        }\n\n        if (!can_convert_to_int(lesson.courseId) || !can_convert_to_int(lesson.profId) ||\n            !can_convert_to_int(lesson.capacity) || !can_convert_to_int(lesson.classNumber))\n        {\n            cout << \"Adad Nist!\" << endl;\n            throw BadRequest();\n        }\n\n        if (!is_prof(lesson.profId, users))\n        {\n            cout << \"Ostad Nist!\" << endl;\n            throw Inaccessibility();\n        }\n\n        if(!is_major_valid(users, majors)){\n            cout << \"Reshte kharab!\" << endl;\n            throw Inaccessibility();\n        }\n\n        \n\n        lessons.push_back(new Lesson(lesson, lessonID));\n    }\n\n    else\n    {\n        throw Inaccessibility();\n    }\n}\n\nbool Post::course_exists(string courseId, vector<Course *> courses)\n{\n    for (Course *c : courses)\n    {\n        if (c->get_CID() == courseId)\n        {\n            return true;\n        }\n    }\n\n    return false;\n}\n\nbool Post::user_exists(string userId, vector<User *> users)\n{\n    for (User *u : users)\n    {\n        if (u->get_id() == userId)\n        {\n            return true;\n        }\n    }\n\n    return false;\n}\n\nbool Post::is_prof(string userId, vector<User *> users)\n{\n    for (User *u : users)\n    {\n        if (u->get_id() == userId)\n        {\n            Professor *prof = dynamic_cast<Professor *>(u);\n            if (prof)\n            {\n                return true;\n            }\n        }\n    }\n\n    return false;\n}\n\nbool Post::can_convert_to_int(const std::string &str)\n{\n    try\n    {\n        size_t pos;\n        std::stoi(str, &pos);\n\n        // Check if the entire string was converted to an integer\n        if (pos == str.length())\n        {\n            return true;\n        }\n        else\n        {\n            return false;\n        }\n    }\n    catch (const std::exception &)\n    {\n        return false;\n    }\n}\n\nbool Post::is_major_valid(vector<User *> users, vector<Major *> majors){\n    for(User* u: users){\n        for(Major* m: majors){\n            if(u->get_majorID()==m->get_MID()){\n                return true;\n            }\n        }\n    }\n\n    return false;\n}\n\n","filename":"/home/ali3ad3ghi/project6-f1/UTMS-Website/src/post.cpp","identifier":"Text Change","lineCount":321,"languageId":"cpp"},"failed":false}