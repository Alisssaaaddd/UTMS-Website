{"date":"2024-06-06T06:44:55.762Z","courseId":"17","assignment":"AP-Spring03-CA6-phase2","trace":{"content":"#include \"../includes/user.hpp\"\n\nUser::User(MD major_)\n{\n    is_signed_in = false;\n    postID = 1;\n    major.MID = major_.MID;\n    major.name = major_.name;\n};\n\nUser::~User()\n{\n}\n\nstring User::get_id() { return ID; };\nstring User::get_name() { return name; };\nstring User::get_majorID() { return majorID; };\nstring User::get_password() { return password; };\nbool User::signed_in() { return is_signed_in; };\nint User::get_postID() { return postID; };\nstring User::get_profile_photo_path() { return profile_photo_path; };\n\nvoid User::login()\n{\n    is_signed_in = true;\n}\n\nvoid User::logout()\n{\n    is_signed_in = false;\n}\n\nvoid User::show_personal_page()\n{\n}\n\nbool User::does_interfere(Lesson* lesson_)\n{\n    bool day_interference = false;\n    bool time_interference = false;\n    for (Lesson* l : activeLessons) {\n        day_interference = false;\n        if (lesson_->get_week_day() == l->get_week_day()) {\n            day_interference = true;\n            if (day_interference) {\n                if (stoi(l->get_end_time()) > stoi(lesson_->get_start_time())) {\n                    time_interference = true;\n                    break;\n                }\n            }\n        }\n    }\n\n    if (day_interference and time_interference) {\n        return true;\n    }\n\n    return false;\n}\n\nvoid User::add_lesson(Lesson*& newLesson)\n{\n    activeLessons.push_back(newLesson);\n}\n\nvoid User::add_post(PostStruct& post)\n{\n    posts.push_back(post);\n    postID++;\n}\n\nvoid User::delete_post(int postID_)\n{\n    bool valid_post = false;\n    for (auto p = posts.begin(); p != posts.end(); ++p) {\n        if (p->id == postID_) {\n            valid_post = true;\n            posts.erase(p);\n            break;\n        }\n    }\n\n    if (!valid_post) {\n        throw Absence();\n    }\n}\n\nstring User::lessons_in_line()\n{\n    string ll = \"\";\n    for (int i = 0; i < activeLessons.size(); i++) {\n        ll += activeLessons[i]->get_course_name();\n        if (i != activeLessons.size() - 1) {\n            ll += COMMA;\n        }\n    }\n    return ll;\n}\n\nvoid User::show_post_titles()\n{\n    for (PostStruct p : posts) {\n        if (p.type == ORD_POST_TYPE)\n            cout << p.id << SPACE << DOUBLE_QUOTATION << p.title << DOUBLE_QUOTATION << endl;\n        else if (p.type == TA_FORM_TYPE)\n            cout << p.id << SPACE << p.title << endl;\n    }\n}\n\nvoid User::show_personal_info()\n{\n}\n\nvoid User::show_post(int postID_, vector<Lesson*>& lessons)\n{\n    for (PostStruct p : posts) {\n        if (p.id == postID_) {\n            if (p.type == ORD_POST_TYPE) {\n                cout << p.id << SPACE << DOUBLE_QUOTATION << p.title << DOUBLE_QUOTATION << SPACE;\n                cout << DOUBLE_QUOTATION << p.message << DOUBLE_QUOTATION << endl;\n            } else if (p.type == TA_FORM_TYPE) {\n                show_personal_info();\n                cout << p.id << SPACE << p.title << endl;\n                show_lesson_info(lessons, stoi(p.lessonId));\n                cout << DOUBLE_QUOTATION << p.message << DOUBLE_QUOTATION << endl;\n            }\n        }\n    }\n}\n\nvoid User::show_lesson_info(vector<Lesson*>& lessons, int lessonId_)\n{\n    for (Lesson* l : lessons) {\n        if (l->get_lessonID() == lessonId_) {\n            l->show_detailed();\n        }\n    }\n}\n\nbool User::have_this_post(int postID_)\n{\n    for (PostStruct p : posts) {\n        if (p.id == postID_) {\n            return true;\n        }\n    }\n    return false;\n}\n\nbool User::already_connected(string userID_)\n{\n    for (User* u : connections) {\n        if (u->get_id() == userID_) {\n            return true;\n        }\n    }\n    return false;\n}\n\nvoid User::connect(User* chosenUser)\n{\n    connections.push_back(chosenUser);\n}\n\nvoid User::receive_notif(Notification newNotif)\n{\n    notifs.push_back(newNotif);\n}\n\nvoid User::display_all_notifs()\n{\n    if (notifs.size() == 0) {\n        throw EmptyException();\n    }\n\n    for (int i = notifs.size() - 1; i >= 0; i--) {\n        display_notif(notifs[i]);\n    }\n\n    notifs.clear();\n}\n\nvoid User::display_notif(Notification notif)\n{\n    cout << notif.id << SPACE << notif.name << COLON << SPACE << notif.message << endl;\n}\n\nvoid User::send_notif(Notification postNotif)\n{\n    for (User* u : connections) {\n        u->receive_notif(postNotif);\n    }\n}\n\nbool User::have_this_lesson(int lessId_)\n{\n    for (Lesson* l : activeLessons) {\n        if (lessId_ == l->get_lessonID()) {\n            return true;\n        }\n    }\n    return false;\n}\n\nvoid User::delete_lesson(int lessId_)\n{\n    bool valid_lesson = false;\n\n    for (int i = 0; i < activeLessons.size(); i++) {\n        if (activeLessons[i]->get_lessonID() == lessId_) {\n            activeLessons.erase(activeLessons.begin() + i);\n            valid_lesson = true;\n        }\n    }\n\n    if (!valid_lesson) {\n        throw Absence();\n    }\n}\n\nbool User::no_active_lessons()\n{\n    if (activeLessons.size() == 0) {\n        return true;\n    }\n    return false;\n}\n\nvoid User::display_all_lessons()\n{\n    for (Lesson* l : activeLessons) {\n        l->display();\n    }\n}\n\nvoid User::set_profile(string newPath)\n{\n    profile_photo_path = newPath;\n}\n\nStudent::Student(SD student, MD major_)\n    : User(major_)\n{\n    ID = student.SID;\n    name = student.name;\n    majorID = student.majorID;\n    password = student.password;\n    semester = student.semester;\n}\n\nStudent::~Student()\n{\n}\n\nvoid Student::show_personal_page()\n{\n    show_personal_info();\n    show_post_titles();\n}\n\nvoid Student::show_personal_info()\n{\n    cout << name << SPACE << major.name << SPACE << semester\n         << SPACE << lessons_in_line() << endl;\n}\n\nbool Student::can_take_lesson(Lesson*& lesson_)\n{\n    if (semester < lesson_->get_prereq()) {\n        return false;\n    }\n    return true;\n}\n\nbool Student::exam_interfers(string examDate_)\n{\n    for (Lesson* l : activeLessons) {\n        if (l->get_date() == examDate_) {\n            return true;\n        }\n    }\n    return false;\n}\n\nProfessor::Professor(PD professor, MD major_)\n    : User(major_)\n{\n    ID = professor.PID;\n    name = professor.name;\n    majorID = professor.majorID;\n    password = professor.password;\n    position = professor.position;\n}\n\nProfessor::~Professor()\n{\n}\n\nvoid Professor::show_personal_page()\n{\n    show_personal_info();\n    show_post_titles();\n}\n\nvoid Professor::show_personal_info()\n{\n    cout << name << SPACE << major.name << SPACE << position\n         << SPACE << lessons_in_line() << endl;\n}\n\nvoid Professor::add_ta_form(TaForm* newForm)\n{\n    forms.push_back(newForm);\n}\n\nvoid Professor::show_number_of_requests(int formId)\n{\n    for (TaForm* tf : forms) {\n        if (tf->get_id() == formId) {\n            tf->display_number_of_requests();\n        }\n    }\n}\n\nvoid Professor::handle_requests_of_form(int formId)\n{\n    for (TaForm* tf : forms) {\n        if (tf->get_id() == formId) {\n            tf->close();\n            tf->judge_requests();\n        }\n    }\n}\n\nvoid Professor::send_reject_notifs(vector<User*>& users, string formId)\n{\n    Notification rejectNotif;\n    rejectNotif.message = TA_REJECT_NOTIF;\n    vector<StudentData> rejected_users;\n    Lesson* chosenLesson;\n    for(TaForm* form: forms){\n        if(form->get_id()==stoi(formId)){\n            rejected_users=form->get_rejected();\n            ch\n        }\n    }\n    for(StudentData s: rejected_users){\n        for(User* user: users){\n            if(user->get_id()==s.SID){\n                user->receive_notif(rejectNotif);\n            }\n        }\n    }\n}\n\nvoid Professor::send_accept_notifs(vector<User*>& users, string formId)\n{\n\n}\n\nManager::Manager(MD major_)\n    : User(major_)\n{\n    ID = MANAGER_ID;\n    name = MANAGER_NAME;\n    majorID = MANAGER_MAJOR_ID;\n    password = MANAGER_PASSWORD;\n}\n\nManager::~Manager()\n{\n}\n\nvoid Manager::show_personal_page()\n{\n    show_personal_info();\n    show_post_titles();\n}\n\nvoid Manager::show_personal_info()\n{\n    cout << MANAGER_PASSWORD << endl;\n}\n","filename":"/home/ali3ad3ghi/project6-f1/UTMS-Website/src/user.cpp","identifier":"Save Document","languageId":"cpp","version":4142,"lineCount":384},"failed":true}