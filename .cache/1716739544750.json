{"date":"2024-05-26T16:05:43.229Z","courseId":"17","assignment":"AP-Spring03-CA6","trace":{"version":615,"content":"#include \"../includes/post.hpp\"\n\nPost::Post() : Method()\n{\n}\n\nPost::~Post()\n{\n}\n\nvoid Post::login(Argument id, Argument password, vector<User *> &users, User *&currentUser)\n{\n    bool id_found = user_exists(id.key, users);\n    if(!id_found){\n        throw Absence();\n    }\n\n    bool password_found = false;\n    User* chosenUser = find_user_by_id(id.key, users);\n\n    if(chosenUser->get_password()==password.key){\n\n    }\n    for (User *u : users)\n    {\n        id_found = false;\n        if (!u->signed_in())\n        {\n            if (u->get_id() == id.key || u->get_id() == MANAGER_ID)\n            {\n                id_found = true;\n                if (u->get_password() == password.key || u->get_password() == MANAGER_PASSWORD)\n                {\n                    password_found = true;\n                    u->login();\n                    currentUser = u;\n                    break;\n                }\n            }\n        }\n\n        else\n        {\n            throw Inaccessibility();\n        }\n    }\n\n    if (!id_found)\n    {\n        throw Absence();\n    }\n\n    if (!password_found)\n    {\n        throw Inaccessibility();\n    }\n\n    cout << \"OK\" << endl;\n}\n\nvoid Post::identify_command(string line, vector<User *> &users, User *&currentUser, int &lessonID_,\n                            vector<Lesson *> &lessons, vector<Course *> &courses, vector<Major *> &majors)\n{\n    istringstream iss(line);\n    string command;\n    iss >> command;\n    size_t i = line.find(\"?\");\n    if (i != string::npos)\n    {\n        line = line.substr(i + 2);\n    }\n\n    else\n    {\n        throw BadRequest();\n    }\n\n    istringstream iss2(line);\n    if (command == \"login\")\n    {\n        handle_login(line, users, currentUser, lessonID_, lessons, courses, majors, iss2);\n    }\n\n    else if (command == \"logout\")\n    {\n        logout(currentUser);\n    }\n\n    else if (command == \"post\")\n    {\n        handle_post(line, users, currentUser, lessonID_, lessons, courses, majors, iss2);\n    }\n\n    else if (command == \"connect\")\n    {\n        handle_connect(line, users, currentUser, lessonID_, lessons, courses, majors, iss2);\n    }\n\n    else if (command == \"course_offer\")\n    {\n        handle_course_offer(line, users, currentUser, lessonID_, lessons, courses, majors);\n    }\n\n    else\n    {\n        throw Absence();\n    }\n}\n\nvoid Post::logout(User *&currentUser)\n{\n    if (currentUser != nullptr)\n    {\n        currentUser->logout();\n        currentUser = nullptr;\n        cout << \"OK\" << endl;\n    }\n\n    else\n    {\n        throw Inaccessibility();\n    }\n}\n\nvoid Post::course_offer(LessonStruct lesson, int &lessonID, User *&currentUser, vector<Lesson *> &lessons,\n                        vector<Course *> &courses, vector<Major *> &majors, vector<User *> &users)\n{\n    Manager *UTaccount = dynamic_cast<Manager *>(currentUser);\n    if (UTaccount)\n    {\n        if (!can_convert_to_int(lesson.courseId) || !can_convert_to_int(lesson.profId) ||\n            !can_convert_to_int(lesson.capacity) || !can_convert_to_int(lesson.classNumber))\n        {\n            throw BadRequest();\n        }\n\n        if (!is_prof(lesson.profId, users))\n        {\n            throw Inaccessibility();\n        }\n\n        if (!is_major_valid(users, majors))\n        {\n            throw Inaccessibility();\n        }\n\n        User *chosenProf = find_user_by_id(lesson.profId, users);\n        if (chosenProf->does_interfere(lesson.startTime))\n        {\n            throw Inaccessibility();\n        }\n\n        cout << \"OK\" << endl;\n        Lesson *newLesson = new Lesson(lesson, lessonID);\n        lessons.push_back(newLesson);\n        chosenProf->add_lesson(newLesson);\n        Notification newNotif = construct_notif(chosenProf, COURSE_OFFER_NOTIF);\n        send_notif_to_all(newNotif, users);\n    }\n\n    else\n    {\n        throw Inaccessibility();\n    }\n}\n\nbool Post::course_exists(string courseId, vector<Course *> courses)\n{\n    for (Course *c : courses)\n    {\n        if (c->get_CID() == courseId)\n        {\n            return true;\n        }\n    }\n\n    return false;\n}\n\nbool Post::is_prof(string userId, vector<User *> users)\n{\n    for (User *u : users)\n    {\n        if (u->get_id() == userId)\n        {\n            Professor *prof = dynamic_cast<Professor *>(u);\n            if (prof)\n            {\n                return true;\n            }\n        }\n    }\n\n    return false;\n}\n\nbool Post::is_major_valid(vector<User *> users, vector<Major *> majors)\n{\n    for (User *u : users)\n    {\n        for (Major *m : majors)\n        {\n            if (u->get_majorID() == m->get_MID())\n            {\n                return true;\n            }\n        }\n    }\n\n    return false;\n}\n\nvoid Post::connect_users(User *currentUser, User *chosenUser)\n{\n    currentUser->connect(chosenUser);\n    chosenUser->connect(currentUser);\n    cout << \"OK\" << endl;\n}\n\nvoid Post::handle_course_offer(string line, vector<User *> &users, User *&currentUser, int &lessonID_,\n                               vector<Lesson *> &lessons, vector<Course *> &courses, vector<Major *> &majors)\n{\n    vector<string> parts = split(line, SPACE);\n    LessonStruct lesson;\n    lesson.lessonID = lessonID_;\n\n    if (parts.size() != 12)\n    {\n        throw BadRequest();\n    }\n\n    for (int i = 0; i < parts.size(); i += 2)\n    {\n        if (parts[i] == \"course_id\")\n        {\n            if (course_exists(parts[i + 1], courses))\n            {\n                lesson.courseId = parts[i + 1];\n                Course *relatedCourse = find_course_by_id(courses, lesson.courseId);\n                lesson.courseName = relatedCourse->get_name();\n                lesson.prereq = relatedCourse->get_prereq();\n                lesson.majors_id = relatedCourse->get_majors_id();\n            }\n            else\n            {\n                throw Absence();\n            }\n        }\n\n        else if (parts[i] == \"professor_id\")\n        {\n            if (user_exists(parts[i + 1], users))\n            {\n                lesson.profId = parts[i + 1];\n                User *prof = find_user_by_id(lesson.profId, users);\n                lesson.profName = prof->get_name();\n            }\n            else\n            {\n                throw Absence();\n            }\n        }\n\n        else if (parts[i] == \"capacity\")\n        {\n            lesson.capacity = parts[i + 1];\n        }\n\n        else if (parts[i] == \"time\")\n        {\n            lesson.weekDay = parts[i + 1];\n            vector<string> timeParts = split(lesson.weekDay, ':');\n            lesson.weekDay = timeParts[0];\n            vector<string> hourParts = split(timeParts[1], '-');\n            lesson.startTime = hourParts[0];\n            lesson.endTime = hourParts[1];\n        }\n\n        else if (parts[i] == \"exam_date\")\n        {\n            lesson.date = parts[i + 1];\n        }\n\n        else if (parts[i] == \"class_number\")\n        {\n            lesson.classNumber = parts[i + 1];\n        }\n    }\n    course_offer(lesson, lessonID_, currentUser, lessons, courses, majors, users);\n}\n\nvoid Post::handle_post(string line, vector<User *> &users, User *&currentUser, int &lessonID_,\n                       vector<Lesson *> &lessons, vector<Course *> &courses, vector<Major *> &majors, istringstream &iss2)\n{\n\n    PostStruct post;\n    string title1;\n    iss2 >> title1;\n\n    if (currentUser == nullptr)\n    {\n        throw Inaccessibility();\n    }\n\n    if (title1 == \"title\")\n    {\n        size_t i = line.find(DOUBLE_QUOTATION);\n        line = line.substr(i + 1);\n        istringstream iss3(line);\n        string temp;\n        getline(iss3, temp, DOUBLE_QUOTATION);\n        post.title = temp;\n        i = line.find(DOUBLE_QUOTATION);\n        line = line.substr(i + 1);\n\n        istringstream iss4(line);\n        iss4 >> temp;\n        if (temp == \"message\")\n        {\n            i = line.find(DOUBLE_QUOTATION);\n            line = line.substr(i + 1);\n            istringstream iss5(line);\n            getline(iss5, temp, DOUBLE_QUOTATION);\n            post.message = temp;\n        }\n        else\n        {\n            throw BadRequest();\n        }\n    }\n\n    else if (title1 == \"message\")\n    {\n        size_t i = line.find(DOUBLE_QUOTATION);\n        line = line.substr(i + 1);\n        istringstream iss3(line);\n        string temp;\n        getline(iss3, temp, DOUBLE_QUOTATION);\n        post.message = temp;\n        i = line.find(DOUBLE_QUOTATION);\n        line = line.substr(i + 1);\n\n        istringstream iss4(line);\n        iss4 >> temp;\n        if (temp == \"title\")\n        {\n            i = line.find(DOUBLE_QUOTATION);\n            line = line.substr(i + 1);\n            istringstream iss5(line);\n            getline(iss5, temp, DOUBLE_QUOTATION);\n            post.title = temp;\n        }\n        else\n        {\n            throw BadRequest();\n        }\n    }\n\n    else\n    {\n        throw BadRequest();\n    }\n\n    Notification postNotif = construct_notif(currentUser, NEW_POST_NOTIF);\n    post.id = currentUser->get_postID();\n    currentUser->add_post(post);\n    currentUser->send_notif(postNotif);\n    cout << \"OK\" << endl;\n}\n\nvoid Post::handle_login(string line, vector<User *> &users, User *&currentUser, int &lessonID_,\n                        vector<Lesson *> &lessons, vector<Course *> &courses, vector<Major *> &majors, istringstream &iss2)\n{\n    Argument id;\n    Argument password;\n    string title;\n    string key;\n    string end;\n    iss2 >> title;\n\n    if (currentUser != nullptr)\n    {\n        throw Inaccessibility();\n    }\n\n    if (title == \"id\")\n    {\n        iss2 >> key;\n        id.title = title;\n        id.key = key;\n\n        iss2 >> title;\n        if (title == \"password\")\n        {\n            password.title = title;\n            iss2 >> key;\n            password.key = key;\n        }\n\n        else\n        {\n            throw BadRequest();\n        }\n\n        iss2 >> end;\n        if (end != EMPTY)\n            throw BadRequest();\n    }\n\n    else if (title == \"password\")\n    {\n        iss2 >> key;\n        password.title = title;\n        password.key = key;\n\n        iss2 >> title;\n        if (title == \"id\")\n        {\n            id.title = title;\n            iss2 >> key;\n            id.key = key;\n        }\n\n        else\n        {\n            throw BadRequest();\n        }\n\n        iss2 >> end;\n        if (end != EMPTY)\n            throw BadRequest();\n    }\n\n    else\n    {\n        throw BadRequest();\n    }\n\n    login(id, password, users, currentUser);\n}\n\nvoid Post::handle_connect(string line, vector<User *> &users, User *&currentUser, int &lessonID_,\n                          vector<Lesson *> &lessons, vector<Course *> &courses, vector<Major *> &majors, istringstream &iss2)\n{\n    string title;\n    string userID_;\n    iss2 >> title;\n    iss2 >> userID_;\n\n    if (currentUser == nullptr)\n    {\n        throw Inaccessibility();\n    }\n\n    if (title == \"id\")\n    {\n\n        if (!can_convert_to_int(userID_))\n        {\n            throw BadRequest();\n        }\n\n        if (currentUser->already_connected(userID_))\n        {\n            throw BadRequest();\n        }\n\n        if (!user_exists(userID_, users))\n        {\n            throw Absence();\n        }\n\n        User *chosenUser = find_user_by_id(userID_, users);\n        connect_users(currentUser, chosenUser);\n    }\n\n    else\n    {\n        throw BadRequest();\n    }\n}\n\nvoid Post::send_notif_to_all(Notification notif, vector<User *> &users)\n{\n    for (User *u : users)\n    {\n        u->receive_notif(notif);\n    }\n}","filename":"/home/ali3ad3ghi/project6-f1/UTMS-Website/src/post.cpp","identifier":"Text Change","lineCount":489,"languageId":"cpp"},"failed":false}