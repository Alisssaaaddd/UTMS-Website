{"date":"2024-05-26T23:49:14.178Z","courseId":"17","assignment":"AP-Spring03-CA6","trace":{"version":268,"content":"#include \"../includes/put.hpp\"\n\nPut::Put() : Method()\n{\n}\n\nPut::~Put()\n{\n}\n\nvoid Put::identify_command(string line, vector<User *> &users, User *&currentUser, int &lessonID_,\n                           vector<Lesson *> &lessons, vector<Course *> &courses, vector<Major *> &majors)\n{\n\n    istringstream iss(line);\n    string command;\n    iss >> command;\n    size_t i = line.find(\"?\");\n    if (i != string::npos)\n    {\n        line = line.substr(i + 2);\n    }\n\n    else\n    {\n        throw BadRequest();\n    }\n\n    istringstream iss2(line);\n    if (command == \"my_courses\")\n    {\n        handle_my_courses(line, users, currentUser, lessons, courses, majors, iss2);\n    }\n\n    else\n    {\n        throw Absence();\n    }\n}\n\nvoid Put::handle_my_courses(string line, vector<User *> &users, User *&currentUser,\n                            vector<Lesson *> &lessons, vector<Course *> &courses, vector<Major *> &majors, istringstream &iss2)\n{\n    string title;\n    string lesID;\n    iss2 >> title;\n    iss2 >> lesID;\n\n    if (currentUser == nullptr)\n    {\n        throw Inaccessibility();\n    }\n\n    if (title == \"id\")\n    {\n        if (!can_convert_to_int(lesID))\n        {\n            throw BadRequest();\n        }\n\n        if (!lesson_exists(stoi(lesID), lessons))\n        {\n            throw Absence();\n        }\n\n        Lesson *chosenLesson = find_lesson_by_id(lessons, lesID);\n\n        Student *currentStudent = dynamic_cast<Student *>(currentUser);\n\n        if (currentStudent)\n        {\n            if (!currentStudent->can_take_lesson(chosenLesson))\n            {\n                throw Inaccessibility();\n            }\n\n            if (!chosenLesson->can_accept_this_major(currentStudent->get_majorID()))\n            {\n                throw Inaccessibility();\n            }\n\n            Course* course = find_course_by_id(courses, chosenLesson->get_course_id());\n\n            if(!course->valid_major(currentUser->get_majorID())){\n                throw Inaccessibility();\n            }\n\n            if (currentStudent->does_interfere(chosenLesson) ||\n                currentStudent->exam_interfers(chosenLesson->get_date()))\n            {\n                throw Inaccessibility();\n            }\n\n            currentStudent->add_lesson(chosenLesson);\n            Notification newNotif = construct_notif(currentStudent, GET_COURSE_NOTIF);\n            currentStudent->send_notif(newNotif);\n            cout << \"OK\" << endl;\n        }\n\n        else\n        {\n            throw Inaccessibility();\n        }\n    }\n\n    else\n    {\n        throw BadRequest();\n    }\n}","filename":"/home/ali3ad3ghi/project6-f1/UTMS-Website/src/put.cpp","identifier":"Text Change","lineCount":110,"languageId":"cpp"},"failed":true}