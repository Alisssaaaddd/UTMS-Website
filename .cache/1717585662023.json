{"date":"2024-06-05T11:07:41.484Z","courseId":"17","assignment":"AP-Spring03-CA6-phase2","trace":{"content":"#include \"../includes/delete.hpp\"\n\nDelete::Delete()\n    : Method()\n{\n}\n\nDelete::~Delete()\n{\n}\n\nvoid Delete::identify_command(string line, vector<User*>& users, User*& currentUser, int& lessonID_,\n    vector<Lesson*>& lessons, vector<Course*>& courses, vector<Major*>& majors)\n{\n    istringstream iss(line);\n    string command;\n    iss >> command;\n\n    check_question_mark(line);\n\n    istringstream iss2(line);\n    if (command == \"post\") {\n        handle_post(line, users, currentUser, lessonID_, lessons, courses, majors, iss2);\n    }\n\n    else if (command == \"my_courses\") {\n        handle_my_courses(line, users, currentUser, lessonID_, lessons, courses, majors, iss2);\n    }\n\n    else {\n        throw Absence();\n    }\n}\n\nvoid Delete::handle_post(string line, vector<User*>& users, User*& currentUser, int& lessonID_,\n    vector<Lesson*>& lessons, vector<Course*>& courses, vector<Major*>& majors, istringstream& iss2)\n{\n    string title;\n    string key;\n    iss2 >> title;\n    iss2 >> key;\n    if (line == EMPTY) {\n        throw Absence();\n    }\n\n    else {\n        if (title == \"id\") {\n            if (!can_convert_to_int(key)) {\n                throw BadRequest();\n            }\n\n            currentUser->delete_post(stoi(key));\n            successful_request();\n        }\n\n        else {\n            throw BadRequest();\n        }\n    }\n}\n\nvoid Delete::handle_my_courses(string line, vector<User*>& users, User*& currentUser, int& lessonID_,\n    vector<Lesson*>& lessons, vector<Course*>& courses, vector<Major*>& majors, istringstream& iss2)\n{\n    string title;\n    string key;\n    iss2 >> title;\n    iss2 >> key;\n    if (currentUser == nullptr) {\n        throw Inaccessibility();\n    }\n\n    if (title == \"id\") {\n        if (!can_convert_to_int(key)) {\n            throw BadRequest();\n        }\n\n        if (!lesson_exists(stoi(key), lessons)) {\n            throw Absence();\n        }\n\n        Lesson* chosenLesson = find_lesson_by_id(lessons, key);\n\n        Student* currentStudent = dynamic_cast<Student*>(currentUser);\n\n        if (currentStudent) {\n            if (!currentStudent->have_this_lesson(stoi(key))) {\n                throw Absence();\n            }\n            currentStudent->delete_lesson(stoi(key));\n            Notification newNotif = construct_notif(currentStudent, DELETE_COURSE_NOTIF);\n            currentStudent->send_notif(newNotif);\n            successful_request();\n        }\n    }\n\n    else {\n        throw BadRequest();\n    }\n}","filename":"/home/ali3ad3ghi/project6-f1/UTMS-Website/src/delete.cpp","identifier":"Save Document","languageId":"cpp","version":3,"lineCount":100},"failed":true}