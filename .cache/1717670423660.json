{"date":"2024-06-06T10:40:22.507Z","courseId":"17","assignment":"AP-Spring03-CA6-phase2","trace":{"content":"\n#include \"../includes/lesson.hpp\"\n\nLesson::Lesson(LessonStruct ls, int& lessonId_current)\n{\n    courseName = ls.courseName;\n    profName = ls.profName;\n    courseId = ls.courseId;\n    profId = ls.profId;\n    capacity = ls.capacity;\n    time.weekDay = ls.weekDay;\n    time.startTime = ls.startTime;\n    time.endTime = ls.endTime;\n    date = ls.date;\n    classNumber = ls.classNumber;\n    lessonID = ls.lessonID;\n    majorsId = ls.majors_id;\n    prereq = ls.prereq;\n    postID = 1;\n}\n\nLesson::~Lesson()\n{\n}\n\nstring Lesson::get_course_name() { return courseName; };\nstring Lesson::get_prof_name() { return profName; };\nstring Lesson::get_course_id() { return courseId; };\nstring Lesson::get_prof_id() { return profId; };\nstring Lesson::get_capacity() { return capacity; };\nstring Lesson::get_week_day() { return time.weekDay; };\nstring Lesson::get_prereq() { return prereq; };\nstring Lesson::get_start_time() { return time.startTime; };\nstring Lesson::get_end_time() { return time.endTime; };\nint Lesson::get_class_num() { return stoi(classNumber); };\nstring Lesson::get_date() { return date; };\nint Lesson::get_lessonID() { return lessonID; };\n\nvoid Lesson::show()\n{\n    cout << lessonID << SPACE << courseName << SPACE << capacity << SPACE << profName << endl;\n}\n\nvoid Lesson::show_detailed()\n{\n    cout << lessonID << SPACE << courseName << SPACE << capacity << SPACE << profName << SPACE << time.weekDay << COLON << time.startTime << HYPHEN << time.endTime << SPACE << date << SPACE << classNumber << endl;\n}\n\nbool Lesson::can_accept_this_major(string majorID_)\n{\n    for (auto m : majorsId) {\n        if (m == majorID_)\n            return true;\n    }\n    return false;\n}\n\nvoid Lesson::display()\n{\n    cout << lessonID << SPACE << courseName << SPACE << capacity << SPACE << profName << SPACE << time.weekDay << COLON << time.startTime << HYPHEN << time.endTime << SPACE << date << SPACE << classNumber << endl;\n}\n\nbool Lesson::is_TA(string studentID)\n{\n    for (auto ta_id : TA_IDs) {\n        if (ta_id == studentID)\n            return true;\n    }\n    return false;\n}\n\nvoid Lesson::add_post_to_channel(PostStruct& newPost)\n{\n    newPost.id = postID;\n    informing_channel.push_back(newPost);\n    postID++;\n}\n\nvoid Lesson::show_channel()\n{\n    show_detailed();\n    for (int i = informing_channel.size() - 1; i >= 0; i--) {\n        show_channel_post(informing_channel[i]);\n    }\n}\n\nvoid Lesson::show_channel_post(PostStruct cPost)\n{\n    cout << cPost.id << SPACE << cPost.sender << SPACE << DOUBLE_QUOTATION << cPost.title << DOUBLE_QUOTATION << endl;\n}\n\nvoid Lesson::show_channel_post_detailed(int postId_)\n{\n    show_detailed();\n    PostStruct p = find_course_post_by_postId(postId_);\n    cout << p.id << SPACE << p.sender << SPACE << DOUBLE_QUOTATION << p.title << DOUBLE_QUOTATION << SPACE << DOUBLE_QUOTATION << p.message << DOUBLE_QUOTATION << endl;\n}\n\nbool Lesson::is_accessable(string userId, bool userHaveLesson)\n{\n    if (is_TA(userId) || userHaveLesson) {\n        return true;\n    }\n    return false;\n}\n\nbool Lesson::course_post_exists(int postId_)\n{\n    for (PostStruct post : informing_channel) {\n        if (postId_ == post.id)\n            return true;\n    }\n    return false;\n}\n\nPostStruct Lesson::find_course_post_by_postId(int postId_)\n{\n    for (PostStruct post : informing_channel) {\n        if (post.id == postId_)\n            return post;\n    }\n}\n\nvoid Lesson::add_TA(string TA_id){\n    TA_IDs.push_back(TA_id);\n}\n\nbool Lesson::can_accept_this_semester(string StuSemester){\n    if(stoi(StuSemester)<=)\n}","filename":"/home/ali3ad3ghi/project6-f1/UTMS-Website/src/lesson.cpp","identifier":"Save Document","languageId":"cpp","version":206,"lineCount":130},"failed":false}