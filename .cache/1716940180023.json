{"date":"2024-05-28T23:49:36.511Z","courseId":"17","assignment":"AP-Spring03-CA6","trace":{"content":"#include \"../includes/website.hpp\"\n\nWebsite::Website(char *majorsFile, char *studentsFile,\n                 char *coursesFile, char *professorsFile)\n{\n    read_files(majorsFile, studentsFile,\n               coursesFile, professorsFile);\n    methods.push_back(new Post());\n    methods.push_back(new Put());\n    methods.push_back(new Get());\n    methods.push_back(new Delete());\n    users.push_back(new Manager(manager_major));\n\n    lessonId_current = 1;\n    exit = false;\n}\n\nWebsite::~Website()\n{\n    for(auto )\n}\n\nvoid Website::import()\n{\n    string line;\n    while (getline(cin, line))\n    {\n        istringstream iss(line);\n        identify_method(line);\n        if(exit) break;\n    }\n}\n\nvoid Website::identify_method(string &line)\n{\n    istringstream iss(line);\n    string method;\n    iss >> method;\n    size_t i = line.find(method);\n\n    if (i != string::npos)\n    {\n        line = line.substr(i + method.length());\n        while (!line.empty() && line[0] == SPACE)\n        {\n            line = line.substr(1);\n        }\n    }\n\n    try\n    {\n        if (method == \"GET\")\n        {\n            for (auto m : methods)\n            {\n                Get *g = dynamic_cast<Get *>(m);\n                if (g)\n                {\n                    g->identify_command(line, users, currentUser, lessonId_current, lessons, courses, majors);\n                }\n            }\n        }\n\n        else if (method == \"POST\")\n        {\n            for (auto m : methods)\n            {\n                Post *post = dynamic_cast<Post *>(m);\n                if (post)\n                {\n                    post->identify_command(line, users, currentUser, lessonId_current, lessons, courses, majors);\n                }\n            }\n        }\n\n        else if (method == \"DELETE\")\n        {\n            for (auto m : methods)\n            {\n                Delete *del = dynamic_cast<Delete *>(m);\n                if (del)\n                {\n                    del->identify_command(line, users, currentUser, lessonId_current, lessons, courses, majors);\n                }\n            }\n        }\n\n        else if (method == \"PUT\")\n        {\n            for (auto m : methods)\n            {\n                Put *put = dynamic_cast<Put *>(m);\n                if (put)\n                {\n                    put->identify_command(line, users, currentUser, lessonId_current, lessons, courses, majors);\n                }\n            }\n        }\n\n        else if (method == \"QUIT\"){\n            exit = true;\n        }\n\n        else\n        {\n            throw BadRequest();\n        }\n    }\n\n    catch (BadRequest &br)\n    {\n        cerr << br.what() << endl;\n    }\n\n    catch (Absence &a)\n    {\n        cerr << a.what() << endl;\n    }\n\n    catch (EmptyException &ee)\n    {\n        cerr << ee.what() << endl;\n    }\n\n    catch (Inaccessibility &ie)\n    {\n        cerr << ie.what() << endl;\n    }\n}\n\nvoid Website::read_majors(char *majorsFileName)\n{\n    ifstream majorsFile(majorsFileName);\n    if (!majorsFile.is_open())\n        cerr << \"Error: Unable to open majorsFile!\" << endl;\n    MD major;\n    string line;\n    getline(majorsFile, line);\n    while (getline(majorsFile, line))\n    {\n        istringstream iss(line);\n        string token;\n\n        getline(iss, token, COMMA);\n        major.MID = token;\n\n        getline(iss, token, COMMA);\n        major.name = token;\n\n        majors.push_back(new Major(major));\n    }\n}\n\nvoid Website::read_students(char *studentsFileName)\n{\n    ifstream studentsFile(studentsFileName);\n    if (!studentsFile.is_open())\n        cerr << \"Error: Unable to open studentsFile!\" << endl;\n    SD student;\n    string line;\n    getline(studentsFile, line);\n    while (getline(studentsFile, line))\n    {\n        istringstream iss(line);\n        string token;\n\n        getline(iss, token, COMMA);\n        student.SID = token;\n\n        getline(iss, token, COMMA);\n        student.name = token;\n\n        getline(iss, token, COMMA);\n        student.majorID = token;\n        MD studentMajor = find_MajorData_by_id(student.majorID);\n\n        getline(iss, token, COMMA);\n        student.semester = token;\n\n        getline(iss, token, COMMA);\n        student.password = token;\n\n        users.push_back(new Student(student, studentMajor));\n    }\n}\n\nvoid Website::read_courses(char *coursesFileName)\n{\n    ifstream coursesFile(coursesFileName);\n    if (!coursesFile.is_open())\n        cerr << \"Error: Unable to open coursesFile!\" << endl;\n    CD course;\n    string line;\n    getline(coursesFile, line);\n    while (getline(coursesFile, line))\n    {\n        istringstream iss(line);\n        string token;\n\n        getline(iss, token, COMMA);\n        course.CID = token;\n\n        getline(iss, token, COMMA);\n        course.name = token;\n\n        getline(iss, token, COMMA);\n        course.credit = token;\n\n        getline(iss, token, COMMA);\n        course.prereq = token;\n\n        getline(iss, token, COMMA);\n        course.majors_id = split(token, SEMI_COLON);\n\n        courses.push_back(new Course(course));\n    }\n}\n\nvoid Website::read_professors(char *professorsFileName)\n{\n    ifstream professorsFile(professorsFileName);\n    if (!professorsFile.is_open())\n        cerr << \"Error: Unable to open professorsFile!\" << endl;\n    PD prof;\n    string line;\n    getline(professorsFile, line);\n    while (getline(professorsFile, line))\n    {\n        istringstream iss(line);\n        string token;\n\n        getline(iss, token, COMMA);\n        prof.PID = token;\n\n        getline(iss, token, COMMA);\n        prof.name = token;\n\n        getline(iss, token, COMMA);\n        prof.majorID = token;\n        MD profMajor = find_MajorData_by_id(prof.majorID);\n\n        getline(iss, token, COMMA);\n        prof.position = token;\n\n        getline(iss, token, COMMA);\n        prof.password = token;\n\n        users.push_back(new Professor(prof, profMajor));\n    }\n}\n\nvector<string> Website::split(const string &str, const char delim)\n{\n    vector<string> strings;\n    string::size_type pos = 0;\n    string::size_type prev = 0;\n\n    while ((pos = str.find(delim, prev)) != string::npos)\n    {\n        strings.push_back(str.substr(prev, pos - prev));\n        prev = pos + sizeof(char);\n    }\n    strings.push_back(str.substr(prev));\n    return strings;\n}\n\nvoid Website::read_files(char *majorsFile, char *studentsFile,\n                         char *coursesFile, char *professorsFile)\n{\n    read_majors(majorsFile);\n    read_students(studentsFile);\n    read_courses(coursesFile);\n    read_professors(professorsFile);\n}\n\nMD Website::find_MajorData_by_id(string userMajorId)\n{\n    MD major;\n    for (Major *m : majors)\n    {\n        if (m->get_MID() == userMajorId)\n        {\n            major.MID = m->get_MID();\n            major.name = m->get_name();\n        }\n    }\n    return major;\n}","filename":"/home/ali3ad3ghi/project6-f1/UTMS-Website/src/website.cpp","identifier":"Save Document","languageId":"cpp","version":168,"lineCount":288},"failed":true}