{"date":"2024-05-28T23:22:00.803Z","courseId":"17","assignment":"AP-Spring03-CA6","trace":{"content":"#include \"../includes/method.hpp\"\n\nMethod::Method()\n{\n}\n\nMethod::~Method()\n{\n}\n\nvoid Method::identify_command(string line, vector<User *> &users, User *&currentUser, int &lessonID_,\n                              vector<Lesson *> &lessons, vector<Course *> &courses, vector<Major *> &majors)\n{\n}\n\nvector<string> Method::split(const string &str, const char delim)\n{\n    vector<string> strings;\n    string::size_type pos = 0;\n    string::size_type prev = 0;\n\n    while ((pos = str.find(delim, prev)) != string::npos)\n    {\n        strings.push_back(str.substr(prev, pos - prev));\n        prev = pos + sizeof(char);\n    }\n    strings.push_back(str.substr(prev));\n    return strings;\n}\n\nCourse *Method::find_course_by_id(vector<Course *> &courses, string courseId)\n{\n    for (Course *c : courses)\n    {\n        if (c->get_CID() == courseId)\n        {\n            return c;\n        }\n    }\n}\n\nUser *Method::find_user_by_id(string id, vector<User *> &users)\n{\n    for (User *u : users)\n    {\n        if (u->get_id() == id)\n        {\n            return u;\n        }\n    }\n}\n\nbool Method::can_convert_to_int(const std::string &str)\n{\n    try\n    {\n        size_t pos;\n        int value = std::stoi(str, &pos);\n\n        if (pos == str.length() && value >= 0)\n        {\n            return true;\n        }\n        else\n        {\n            return false;\n        }\n    }\n    catch (const std::exception &)\n    {\n        return false;\n    }\n}\n\nLesson *Method::find_lesson_by_id(vector<Lesson *> &lessons, string lessonID)\n{\n    for (Lesson *l : lessons)\n    {\n        if (l->get_lessonID() == stoi(lessonID))\n        {\n            return l;\n        }\n    }\n}\n\nbool Method::lesson_exists(int lessonID, vector<Lesson *> &lessons)\n{\n    for (Lesson *l : lessons)\n    {\n        if (l->get_lessonID() == lessonID)\n        {\n            return true;\n        }\n    }\n\n    return false;\n}\n\nbool Method::user_exists(string userId, vector<User *> users)\n{\n    for (User *u : users)\n    {\n        if (u->get_id() == userId)\n        {\n            return true;\n        }\n    }\n\n    return false;\n}\n\nNotification Method::construct_notif(User *userData, string message)\n{\n    Notification notif;\n    notif.id = userData->get_id();\n    notif.name = userData->get_name();\n    notif.message = message;\n    return notif;\n}\n\nbool Method::all_is_space(const std::string &line)\n{\n    bool isSpace = true;\n\n    for (char c : line)\n    {\n        if (c != SPACE)\n        {\n            isSpace = false;\n            break;\n        }\n    }\n\n    return isSpace;\n}\n\nvoid Method::check_question_mark(string l)\n{\n    istringstream iss(line);\n    string command;\n    iss >> command;\n    size_t i = line.find(\"?\");\n    if (i != string::npos)\n    {\n        line = line.substr(i + 1);\n        while (!line.empty() && line[0] == '?')\n        {\n            line = line.substr(1);\n        }\n    }\n\n    else\n    {\n        throw BadRequest();\n    }\n}","filename":"/home/ali3ad3ghi/project6-f1/UTMS-Website/src/method.cpp","identifier":"Save Document","languageId":"cpp","version":53,"lineCount":156},"failed":true}