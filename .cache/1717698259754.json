{"date":"2024-06-06T18:24:18.282Z","courseId":"17","assignment":"AP-Spring03-CA6-phase2","trace":{"version":156,"content":"#include \"../includes/method.hpp\"\n\nMethod::Method()\n{\n}\n\nMethod::~Method()\n{\n}\n\nvoid Method::identify_command(string line, vector<User*>& users, User*& currentUser, int& lessonID_,\n    vector<Lesson*>& lessons, vector<Course*>& courses, vector<Major*>& majors)\n{\n}\n\nvector<string> Method::split(const string& str, const char delim)\n{\n    vector<string> strings;\n    string::size_type pos = 0;\n    string::size_type prev = 0;\n\n    while ((pos = str.find(delim, prev)) != string::npos) {\n        strings.push_back(str.substr(prev, pos - prev));\n        prev = pos + sizeof(char);\n    }\n    strings.push_back(str.substr(prev));\n    return strings;\n}\n\nCourse* Method::find_course_by_id(vector<Course*>& courses, string courseId)\n{\n    for (Course* c : courses) {\n        if (c->get_CID() == courseId) {\n            return c;\n        }\n    }\n}\n\nUser* Method::find_user_by_id(string id, vector<User*>& users)\n{\n    for (User* u : users) {\n        if (u->get_id() == id) {\n            return u;\n        }\n    }\n}\n\nbool Method::can_convert_to_int(const std::string& str)\n{\n    try {\n        size_t pos;\n        int value = std::stoi(str, &pos);\n\n        if (pos == str.length() && value >= 0) {\n            return true;\n        } else {\n            return false;\n        }\n    } catch (const std::exception&) {\n        return false;\n    }\n}\n\nLesson* Method::find_lesson_by_id(vector<Lesson*>& lessons, string lessonID)\n{\n    for (Lesson* l : lessons) {\n        if (l->get_lessonID() == stoi(lessonID)) {\n            return l;\n        }\n    }\n}\n\nbool Method::lesson_exists(int lessonID, vector<Lesson*>& lessons)\n{\n    for (Lesson* l : lessons) {\n        if (l->get_lessonID() == lessonID) {\n            return true;\n        }\n    }\n\n    return false;\n}\n\nbool Method::user_exists(string userId, vector<User*> users)\n{\n    for (User* u : users) {\n        if (u->get_id() == userId) {\n            return true;\n        }\n    }\n\n    return false;\n}\n\nNotification Method::construct_notif(User* userData, string message)\n{\n    Notification notif;\n    notif.id = userData->get_id();\n    notif.name = userData->get_name();\n    notif.message = message;\n    return notif;\n}\n\nbool Method::all_is_space(const std::string& line)\n{\n    bool isSpace = true;\n\n    for (char c : line) {\n        if (c != SPACE) {\n            isSpace = false;\n            break;\n        }\n    }\n\n    return isSpace;\n}\n\nvoid Method::check_question_mark(string& line)\n{\n    istringstream iss(line);\n    size_t i = line.find(QUESTION_MARK_STRING);\n    if (i != string::npos) {\n        line = line.substr(i + 1);\n        while (!line.empty() && line[0] == QUESTION_MARK) {\n            line = line.substr(1);\n        }\n    }\n\n    else {\n        throw BadRequest();\n    }\n}\n\nvoid Method::successful_request()\n{\n    cout << SUCCESS_MESSAGE << endl;\n}\n\nstring Method::image_format(string line)\n{\n    for (string format : SUPPORTED_FORMATS) {\n        size_t pos = line.find(format);\n        if (pos != string::npos) {\n            return format;\n        }\n    }\n    return INVALID_FORMAT;\n}\n\nvoid Method::check_lesson_existance(int lessonID_, vector<Lesson*>& lessons)\n{\n    if (!lesson_exists(lessonID_, lessons)){\n        cout << \"dars voojood nadare\\n\";\n        throw Absence();\n    }\n}\n\nvoid Method::check_natural_number(string& id)\n{\n    if (!can_convert_to_int(id)){\n        cout << \"id addad nemishe: \" << id << endl;\n        throw BadRequest();\n}}","filename":"/home/ali3ad3ghi/project6-f1/UTMS-Website/src/method.cpp","identifier":"Text Change","lineCount":163,"languageId":"cpp"},"failed":false}